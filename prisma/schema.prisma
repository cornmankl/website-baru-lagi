// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model with authentication and profile information
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  phone         String?
  avatar        String?
  role          UserRole  @default(CUSTOMER)
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Authentication
  accounts      Account[]
  sessions      Session[]
  
  // Customer data
  addresses     Address[]
  orders        Order[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  reviews       Review[]
  blogPosts     BlogPost[]
  comments      Comment[]
  
  @@map("users")
}

enum UserRole {
  CUSTOMER
  ADMIN
  STAFF
}

// Authentication models for NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Product categories
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("categories")
}

// Product tags for filtering
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products ProductTag[]

  @@map("tags")
}

// Product model with variants and pricing
model Product {
  id            String           @id @default(cuid())
  name          String
  description   String?
  shortDesc     String?
  slug          String           @unique
  price         Float
  comparePrice  Float?
  sku           String?          @unique
  barcode       String?
  trackQuantity Boolean          @default(true)
  quantity      Int              @default(0)
  isActive      Boolean          @default(true)
  isFeatured    Boolean          @default(false)
  isNew         Boolean          @default(false)
  images        String?          // JSON string array
  categoryId    String?
  weight        Float?
  dimensions    String?
  ingredients   String?
  nutritionInfo String?
  allergens     String?
  preparation   String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  category      Category?        @relation(fields: [categoryId], references: [id])
  tags          ProductTag[]
  variants      ProductVariant[]
  reviews       Review[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]

  @@map("products")
}

// Product variants (sizes, flavors, etc.)
model ProductVariant {
  id          String  @id @default(cuid())
  productId   String
  name        String
  sku         String? @unique
  price       Float
  comparePrice Float?
  quantity    Int     @default(0)
  isActive    Boolean @default(true)
  images      String? // JSON string array
  attributes  String  // JSON string for variant attributes

  product     Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  cartItems   CartItem[]
  wishlistItems WishlistItem[]

  @@unique([productId, name])
  @@map("product_variants")
}

// Many-to-many relationship between products and tags
model ProductTag {
  id        String @id @default(cuid())
  productId String
  tagId     String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId])
  @@map("product_tags")
}

// Customer addresses
model Address {
  id          String      @id @default(cuid())
  userId      String
  label       String?     // "Home", "Work", etc.
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String      @default("Malaysia")
  phone       String?
  isDefault   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

// Orders and order items
model Order {
  id              String      @id @default(cuid())
  userId          String?
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  paymentIntentId String?
  subtotal        Float
  tax             Float       @default(0)
  shipping        Float
  discount        Float       @default(0)
  total           Float
  currency        String      @default("MYR")
  notes           String?
  trackingNumber  String?
  estimatedDelivery DateTime?
  deliveredAt     DateTime?
  addressId       String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user      User?      @relation(fields: [userId], references: [id])
  address   Address?   @relation(fields: [addressId], references: [id])
  items     OrderItem[]
  payments  Payment[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model OrderItem {
  id           String   @id @default(cuid())
  orderId      String
  productId    String
  variantId    String?
  name         String
  sku          String?
  price        Float
  quantity     Int
  totalPrice   Float
  images       String?  // JSON string array
  attributes   String?  // JSON string for selected variant attributes
  createdAt    DateTime @default(now())

  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

// Payment records
model Payment {
  id              String        @id @default(cuid())
  orderId         String
  amount          Float
  currency        String        @default("MYR")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String
  transactionId   String?
  provider        String?       // "stripe", "fpx", "grabpay", etc.
  receiptUrl      String?
  failureReason   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Shopping cart
model CartItem {
  id           String   @id @default(cuid())
  userId       String
  productId    String
  variantId    String?
  quantity     Int      @default(1)
  price        Float
  attributes   String?  // JSON string for selected variant attributes
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

// Wishlist
model WishlistItem {
  id           String   @id @default(cuid())
  userId       String
  productId    String
  variantId    String?
  createdAt    DateTime @default(now())

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([userId, productId, variantId])
  @@map("wishlist_items")
}

// Product reviews
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  images    String?  // JSON string array
  isVerified Boolean @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
}

// Blog posts and recipes
model BlogPost {
  id            String       @id @default(cuid())
  title         String
  slug          String       @unique
  content       String
  excerpt       String?
  featuredImage String?
  authorId      String
  categoryId    String?
  status        PostStatus   @default(DRAFT)
  publishedAt   DateTime?
  metaTitle     String?
  metaDesc      String?
  tags          String?      // JSON string array
  isRecipe      Boolean      @default(false)
  recipeData    String?      // JSON for recipe ingredients, instructions, etc.
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  author   User?         @relation(fields: [authorId], references: [id])
  category BlogCategory? @relation(fields: [categoryId], references: [id])
  comments Comment[]

  @@map("blog_posts")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model BlogCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts BlogPost[]

  @@map("blog_categories")
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String?
  name      String?
  email     String?
  content   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post BlogPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User?     @relation(fields: [userId], references: [id])

  @@map("comments")
}

// Newsletter subscribers
model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletter_subscribers")
}

// Promo codes and discounts
model PromoCode {
  id            String           @id @default(cuid())
  code          String           @unique
  type          PromoType
  value         Float
  minOrder      Float?
  maxUses       Int?
  usedCount     Int              @default(0)
  validFrom     DateTime
  validUntil    DateTime
  isActive      Boolean          @default(true)
  applicableTo  PromoApplicable  @default(ALL)
  productIds    String?          // JSON string array
  categoryIds   String?          // JSON string array
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@map("promo_codes")
}

enum PromoType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum PromoApplicable {
  ALL
  PRODUCTS
  CATEGORIES
  USERS
}